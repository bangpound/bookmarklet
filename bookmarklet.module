<?php
// $Id$
/**
 * @file bookmarklet.module
 * TODO: Enter file description here.
 */

/**
 * Implementation of hook_init().
 */
function bookmarklet_init() {
  if (isset($_REQUEST['bookmarklet'])) {
    $path = drupal_get_path('module', 'bookmarklet');
    drupal_add_js($path .'/bookmarklet.child.js', 'module', 'footer');
    $GLOBALS['bookmarklet_page_template'] = TRUE;
  }
}

/**
 * Implementation of hook_menu().
 */
function bookmarklet_menu() {
  $items['bookmarklet/js'] = array(
    'title' => 'Bookmarklet',
    'page callback' => 'bookmarklet_js',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/bookmarklet'] = array(
    'title callback' => 'node_page_title',
    'title arguments' => array(1),
    'page callback' => 'bookmarklet_node_save_confirm',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('view', 1),
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Implementation of hook_block().
 */
function bookmarklet_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {

    case 'list':
      $blocks[0]['info'] = t('Bookmarklet');
      return $blocks;

    case 'configure':
      if ($delta == 0) {
        $types = array_fill_keys(array_keys(node_get_types('types')), '');
        $form['bookmarklet'] = array(
          '#theme' => 'bookmarklet_config',
        );
        $form['bookmarklet']['node_types'] = array(
          '#type' => 'checkboxes',
          '#default_value' => variable_get('bookmarklet_node_types', array('story' => 'story')),
          '#options' => $types,
        );
        $form['bookmarklet']['default_node_type'] = array(
          '#type' => 'radios',
          '#default_value' => variable_get('bookmarklet_default_node_type', 'story'),
          '#options' => $types,
        );
        $form['bookmarklet']['constant'] = array(
          '#type' => 'textfield',
          '#title' => t('Constant'),
          '#default_value' => variable_get('bookmarklet_constant', ''),
        );
        return $form;
      }
      break;

    case 'save':
      if ($delta == 0) {
        variable_set('bookmarklet_node_types', $edit['node_types']);
        variable_set('bookmarklet_default_node_type', $edit['default_node_type']);
        variable_set('bookmarklet_constant', $edit['constant']);
      }
      break;

    case 'view':
      if ($delta == 0) {
        $block['subject'] = t('Bookmarklet');
        $block['content'] = theme('bookmarklet', 'Post on '. variable_get('site_name', 'Drupal'), bookmarklet_script());
      }

      return $block;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function bookmarklet_form_alter(&$form, $form_state, $form_id) {
  if (isset($_REQUEST['bookmarklet']) && isset($form['type']) && isset($form['#node']) && ($form_id == $form['type']['#value'] .'_node_form')) {
    if (!$form_state['submitted']) {
      _bookmarklet_message(array('method' => 'moveToTop'), $_SERVER['HTTP_REFERER']);
    }

    if (module_exists('vertical_tabs')) {
      vertical_tabs_remove_vertical_tabs($form);
    }

    // Recurse through all children.
    _bookmarklet_form_alter($form, $form_state, $form_id);

    // Definitely shrink the body field.
    if (!empty($form['body_field'])) {
      $form['body_field']['body']['#rows'] = 5;

      // Drupal resizable behavior fake-out. It's not helpful in a small frame.
      $form['body_field']['body']['#attributes'] = array(
        'class' => 'textarea-processed',
      );
    }

    // Add submit handler.
    $form['buttons']['submit']['#submit'][] = 'bookmarklet_form_submit';

    // Store the referrer which will be used in the submit handler to direct
    // the child JS to tell the parent document close the iframe.
    // TODO: Workaround for missing referrers.
    $form['bookmarklet_referrer'] = array(
      '#type' => 'hidden',
      '#default_value' => $_SERVER['HTTP_REFERER'],
    );
  }
}

/**
 * Generic form submit handler.
 *
 * @see modalframe_form_submit().
 * @ingroup forms
 */
function bookmarklet_form_submit($form, &$form_state) {
  $query = array(
    'bookmarklet' => TRUE,
    'origin' => $form_state['values']['bookmarklet_referrer'],
  );
  $form_state['redirect'] = array('node/'. $form_state['nid'] .'/bookmarklet', $query);
}

function _bookmarklet_form_alter(&$elements, $form_state, $form_id) {
  static $preserve = array();

  // This function is called recursively, but the array of field names to
  // preserve should only be generated once.
  if (empty($preserve)) {

    // Body field and buttons are not marked required, so they need to be
    // explicitly preserved.
    $preserve = array('body_field', 'buttons');
    drupal_alter('bookmarklet_fields', $preserve);
  }

  foreach (element_children($elements) as $key) {
    if (isset($elements[$key]) && $elements[$key]) {
      if (in_array($key, $preserve)) {
        continue;
      }

      // Only worry about form elements that have UI.
      if (isset($elements[$key]['#type']) && in_array($elements[$key]['#type'], array('value', 'hidden', 'token'))) {
        continue;
      }

      // Recurse through all children.
      _bookmarklet_form_alter($elements[$key], $form_state, $form_id);

      // Only worry about form elements the user can access.
      if (!isset($elements[$key]['#access']) || $elements[$key]['#access']) {
        if (!isset($elements[$key]['#required']) || !$elements[$key]['#required']) {
          $elements[$key]['#access'] = FALSE;
        }
      }
    }
  }
}

/**
 * Set up a message to pass from the iframe to the parent document.
 */
function _bookmarklet_message($event = NULL, $target_url = NULL) {
  static $stored_message = array();

  if (!is_null($event) && !is_null($target_url)) {
    $stored_message = array(
      'event' => $event,
      'target_url' => $target_url
    );
  }
  return $stored_message;
}

function bookmarklet_footer($main = 0) {
  if ($message = _bookmarklet_message()) {
    $path = drupal_get_path('module', 'bookmarklet');
    drupal_add_js($path .'/jquery-postmessage/jquery.ba-postmessage.js', 'module', 'footer');
    drupal_add_js(array('bookmarklet' => $message), 'setting', 'footer');
  }
}

/**
 * Implement hook_theme_registry_alter().
 *
 * @see modalframe_theme_registry_alter()
 * @ingroup themeable
 */
function bookmarklet_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['page']) && isset($theme_registry['page']['theme paths'])) {
    $module_path = drupal_get_path('module', 'bookmarklet');
    array_unshift($theme_registry['page']['theme paths'], $module_path);
    array_unshift($theme_registry['page']['preprocess functions'], 'bookmarklet_pre_preprocess_page');
  }
}

/**
 * Preprocess template variables for page.tpl.php - step 1.
 *
 * Performance enhancement: prevent template_preprocess_page() from generating
 * sidebar blocks when a modal frame has been requested.
 *
 * @see modalframe_pre_preprocess_page()
 *
 */
function bookmarklet_pre_preprocess_page(&$variables) {
  if (!empty($GLOBALS['bookmarklet_page_template'])) {
    $variables['show_blocks'] = FALSE;
  }
}

/**
 * Preprocess template variables for page.tpl.php - step 2.
 *
 * @see modalframe_preprocess_page()
 *
 * @ingroup themeable
 */
function bookmarklet_preprocess_page(&$variables) {
  if (!empty($GLOBALS['bookmarklet_page_template'])) {
    if (!isset($variables['template_files'])) {
      $variables['template_files'] = array();
    }
    array_unshift($variables['template_files'], 'bookmarklet-page');
  }
}

/**
 * Implementation of hook_theme().
 */
function bookmarklet_theme($existing, $type, $theme, $path) {
  return array(
    'bookmarklet' => array(
      'arguments' => array(
        'text' => '',
        'script' => '',
        'options' => array(),
      ),
    ),
    'bookmarklet_config' => array(
      'arguments' => array(
        'form' => array(),
      ),
    ),
  );
}

/**
 * Theme the bookmarklet link.
 *
 * Takes the same arguments as l() but deliberately side steps the XSS security
 * filter because our goal is XSS.
 */
function theme_bookmarklet($text = '', $script = '', $options = array()) {
  $options['absolute'] = TRUE;
  $options['attributes'] = array(
    'onclick' => 'alert(\'Click and drag this to your bookmark bar to install the bookmarklet.\');return false;',
    'class' => 'bookmarklet',
  );
  $decoy = 'http://BOOKMARKLET';
  $link = l($text, $decoy, $options);
  $script = 'javascript:'. rawurlencode(trim($script));
  return str_replace($decoy, $script, $link);
}

/**
 * Theme the bookmarklet config form.
 */
function theme_bookmarklet_config($form) {
  $rows = array();
  foreach (node_get_types('names') as $type => $name) {
    $row = array();
    $row[] = array(
      'data' => $name,
      'header' => TRUE,
    );
    $row[] = array(
      'data' => drupal_render($form['node_types'][$type]),
      'align' => 'center',
      'title' => t($name) .': '. t('Enabled'),
    );
    $row[] = array(
      'data' => drupal_render($form['default_node_type'][$type]),
      'align' => 'center',
      'title' => t($name) .': '. t('Default'),
    );
    $rows[] = $row;
  }
  $header = array(
    t('Name'),
    t('Enabled'),
    t('Default'),
  );
  $output = theme('table', $header, $rows);
  $output .= drupal_render($form);
  return $output;
}

function bookmarklet_script() {
  if ($cache = cache_get('bookmarklet_script')) {
    $script = $cache->data;
  }
  else {
    global $base_url;
    $path = drupal_get_path('module', 'bookmarklet');
    $instance_name = md5($base_url);
    $data = array(
      'compilation_level' => 'SIMPLE_OPTIMIZATIONS',
      'output_format' => 'text',
      'output_info' => 'compiled_code',
    );
    $script = $data['js_code'] = <<<EOT
/* global $,DrupalBookmarklet,DrupalBookmarklet$instance_name,Math,document */
var DrupalBookmarklet$instance_name;
(function () {
  var host, path, b;
  if (typeof DrupalBookmarklet$instance_name === 'object') {
    DrupalBookmarklet$instance_name.reOpen();
  }
  else {
    host = '$base_url';
    path = '$path';
    b = document.createElement('SCRIPT');
    b.type = 'text/javascript';
    b.src = host + '/' + path + '/bookmarklet.js?' + (Math.random());
    b.onload = function () {
      DrupalBookmarklet$instance_name = new DrupalBookmarklet(host, path);
    };
    document.getElementsByTagName('head')[0].appendChild(b);
  }
}());
/*jslint white: true, browser: true, onevar: true, undef: true, nomen: true, eqeqeq: true, plusplus: true, bitwise: true, regexp: true, newcap: true, immed: true, maxerr: 500, indent: 2 */
EOT;
    $headers = array(
      'Content-type' => 'application/x-www-form-urlencoded',
    );
    $request = drupal_http_request('http://closure-compiler.appspot.com/compile', $headers, 'POST', http_build_query($data, '', '&'));
    if ($request->code == '200') {
      $script = $request->data;
      cache_set('bookmarklet_script', $script);
    }
  }
  return $script;
}

function bookmarklet_js() {
  $node_types = array_filter(variable_get('bookmarklet_node_types', array('story' => 'story')));
  // We are returning JavaScript, so tell the browser.
  drupal_set_header('Content-Type: text/javascript; charset=utf-8');

  $settings = array(
    'stylesheet' => variable_get('bookmarklet_stylesheet', 'http://ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/flick/jquery-ui.css'),
    'types' => array(),
    'defaultType' => variable_get('bookmarklet_default_node_type', 'story'),
    'urlMap' => array(),
    'constant' => variable_get('bookmarklet_constant', ''),
  );

  // Node types keyed by hyphenated machine name.
  // Name is the human readable node type used in the button text of the dialog.
  foreach (node_get_types('types') as $type) {
    if (in_array($type->type, $node_types) && node_access('create', $type->type)) {
      $settings['types'][str_replace('_', '-', $type->type)] = array(
        'name' => drupal_ucfirst($type->name),
      );
    }
  }

  // Map URLs to node types.
  $settings['urlMap'] = array(
    'www.youtube.com' => 'video',
    'youtube.com' => 'video',
  );

  if (!empty($_GET['callback'])) {
    echo $_GET['callback'] .'('. drupal_to_js($settings) .');';
  }
  else {
    echo drupal_to_js($settings);
  }
}

/**
 * Node save confirmation page.
 */
function bookmarklet_node_save_confirm($node) {
  if (!empty($_GET['origin'])) {
    _bookmarklet_message(array('method' => 'close'), $_GET['origin']);
  }
  $links = array();
  $options = array(
    'attributes' => array(
      'target' => '_blank',
    ),
  );
  $links[] = l('View', 'node/'. $node->nid, $options);
  $links[] = l('Edit', 'node/'. $node->nid .'/edit', $options);
  return theme('item_list', $links);
}
