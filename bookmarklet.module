<?php
// $Id$
/**
 * @file bookmarklet.module
 * TODO: Enter file description here.
 */

/**
 * Implementation of hook_init().
 */
function bookmarklet_init() {
  if (isset($_REQUEST['bookmarklet'])) {
    $GLOBALS['modalframe_page_template'] = TRUE;
    $module_path = drupal_get_path('module', 'modalframe');
    drupal_add_css($module_path .'/css/modalframe.child.css');
  }
}

/**
 * Implementation of hook_block().
 */
function bookmarklet_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {

    case 'list':
      $blocks[0]['info'] = t('Bookmarklet');
      return $blocks;

    case 'view':
      if ($delta == 0) {
        $block['subject'] = t('Bookmarklet');
        $block['content'] = theme('bookmarklet', 'Post on '. variable_get('site_name', 'Drupal'), bookmarklet_script());
      }

      return $block;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function bookmarklet_form_alter(&$form, $form_state, $form_id) {
  if (isset($_REQUEST['bookmarklet']) && isset($form['type']) && isset($form['#node']) && ($form_id == $form['type']['#value'] .'_node_form')) {

    // Recurse through all children.
    _bookmarklet_form_alter($form, $form_state, $form_id);

    // Definitely shrink the body field.
    if (!empty($form['body_field'])) {
      $form['body_field']['body']['#rows'] = 5;
    }
  }
}

function _bookmarklet_form_alter(&$elements, $form_state, $form_id) {
  foreach (element_children($elements) as $key) {
    if (isset($elements[$key]) && $elements[$key]) {
      if (in_array($key, array('body_field', 'field_link', 'buttons'))) {
        continue;
      }

      // Only worry about form elements that have UI.
      if (isset($elements[$key]['#type']) && in_array($elements[$key]['#type'], array('value', 'hidden'))) {
        continue;
      }

      // Recurse through all children.
      _bookmarklet_form_alter($elements[$key], $form_state, $form_id);

      // Only worry about form elements the user can access.
      if (!isset($elements[$key]['#access']) || $elements[$key]['#access']) {
        if (!isset($elements[$key]['#required']) || !$elements[$key]['#required']) {
          $elements[$key]['#access'] = FALSE;
        }
      }
    }
  }
}

/**
 * Implementation of hook_theme().
 */
function bookmarklet_theme($existing, $type, $theme, $path) {
  return array(
    'bookmarklet' => array(
      'arguments' => array(
        'text' => '',
        'script' => '',
        'options' => array(),
      ),
    ),
  );
}

/**
 * Theme the bookmarklet link.
 *
 * Takes the same arguments as l() but deliberately side steps the XSS security
 * filter because our goal is XSS.
 */
function theme_bookmarklet($text, $script, $options) {
  $options['absolute'] = TRUE;
  $decoy = 'http://BOOKMARKLET';
  $link = l($text, $decoy, $options);
  $script = 'javascript:'. trim($script);
  return str_replace($decoy, $script, $link);
}

function bookmarklet_script() {
  global $base_url;
  $file = drupal_get_path('module', 'bookmarklet') .'/bookmarklet.js';

  // jslint
  /* global DRUPAL_BOOKMARKLET_HOST,$,drupalBookmarklet,L,Math */
  $script = <<<EOT
DRUPAL_BOOKMARKLET_HOST = '$base_url';
$.getScript(DRUPAL_BOOKMARKLET_HOST + '/$file?' + (Math.random()), function (data, textStatus) {
  drupalBookmarklet($, L);
});
EOT;
  module_load_include('php', 'bookmarklet', 'jsmin-php/jsmin');

  return JSMin::minify(bookmarklet_jquery($script));
}

function bookmarklet_jquery($script, $version = '1.2.6') {
  return <<<EOT
// UNMINIFED

(function( window, document, req_version, callback, \$, script, done, readystate ){

  // If jQuery isn't loaded, or is a lower version than specified, load the
  // specified version and call the callback, otherwise just call the callback.
  if ( !(\$ = window.jQuery) || req_version > \$.fn.jquery || callback( \$ ) ) {

    // Create a script element.
    script = document.createElement( 'script' );
    script.type = 'text/javascript';

    // Load the specified jQuery from the Google AJAX API server (minified).
    script.src = 'http://ajax.googleapis.com/ajax/libs/jquery/' + req_version + '/jquery.min.js';

    // When the script is loaded, remove it, execute jQuery.noConflict( true )
    // on the newly-loaded jQuery (thus reverting any previous version to its
    // original state), and call the callback with the newly-loaded jQuery.
    script.onload = script.onreadystatechange = function() {
      if ( !done && ( !( readystate = this.readyState )
        || readystate == 'loaded' || readystate == 'complete' ) ) {

        callback( (\$ = window.jQuery).noConflict(1), done = 1 );

        \$( script ).remove();
      }
    };

    // Add the script element to either the head or body, it doesn't matter.
    document.documentElement.childNodes[0].appendChild( script );
  }

}( window, document,

  // Minimum jQuery version required. Change this as-needed.
  '$version',

  // Your jQuery code goes inside this callback. \$ refers to the jQuery object,
  // and L is a boolean that indicates whether or not an external jQuery file
  // was just "L"oaded.
  function( \$, L ) {
    $script
  }
));
EOT;
}
